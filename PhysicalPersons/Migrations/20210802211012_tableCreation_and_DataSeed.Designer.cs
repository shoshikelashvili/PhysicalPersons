// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace PhysicalPersons.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210802211012_tableCreation_and_DataSeed")]
    partial class tableCreation_and_DataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Batumi"
                        });
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1999, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Gender = "კაცი",
                            Image = "/images/image1.jpg",
                            LastName = "Shoshikelashvili",
                            Name = "Rati",
                            PersonalNumber = "12345678910"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1980, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Gender = "კაცი",
                            Image = "/images/image1.jpg",
                            LastName = "Axalkacishvili",
                            Name = "Giorgi",
                            PersonalNumber = "12345678910"
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(2001, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            Gender = "ქალი",
                            Image = "/images/image1.jpg",
                            LastName = "გოჩეჩილაძე",
                            Name = "მარიამ",
                            PersonalNumber = "12345678910"
                        });
                });

            modelBuilder.Entity("Entities.Models.PersonRelation", b =>
                {
                    b.Property<int>("RelatedFromId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<string>("RelationType")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("RelatedFromId", "RelatedToId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("PersonRelations");

                    b.HasData(
                        new
                        {
                            RelatedFromId = 1,
                            RelatedToId = 2,
                            RelationType = "ნათესავი"
                        },
                        new
                        {
                            RelatedFromId = 2,
                            RelatedToId = 1,
                            RelationType = "ნათესავი"
                        },
                        new
                        {
                            RelatedFromId = 3,
                            RelatedToId = 1,
                            RelationType = "სხვა"
                        });
                });

            modelBuilder.Entity("Entities.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhoneNumberId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = "555940789",
                            PersonId = 1,
                            Type = "მობილური"
                        },
                        new
                        {
                            Id = 2,
                            Number = "58890309",
                            PersonId = 2,
                            Type = "სახლის"
                        });
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Models.PersonRelation", b =>
                {
                    b.HasOne("Entities.Models.Person", "PersonRelatedFrom")
                        .WithMany("RelatedTo")
                        .HasForeignKey("RelatedFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Person", "PersonRelatedTo")
                        .WithMany("RelatedFrom")
                        .HasForeignKey("RelatedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonRelatedFrom");

                    b.Navigation("PersonRelatedTo");
                });

            modelBuilder.Entity("Entities.Models.PhoneNumber", b =>
                {
                    b.HasOne("Entities.Models.Person", null)
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });
#pragma warning restore 612, 618
        }
    }
}
